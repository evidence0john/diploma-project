
transporter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000440  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000440  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800068  00800068  000004dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a46  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000428  00000000  00000000  00001092  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000052b  00000000  00000000  000014ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000304  00000000  00000000  000019e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000300  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000041f  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  0000240b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	c8 c1       	rjmp	.+912    	; 0x394 <__vector_1>
   4:	f1 c1       	rjmp	.+994    	; 0x3e8 <__vector_2>
   6:	34 c0       	rjmp	.+104    	; 0x70 <__bad_interrupt>
   8:	33 c0       	rjmp	.+102    	; 0x70 <__bad_interrupt>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__bad_interrupt>
   c:	31 c0       	rjmp	.+98     	; 0x70 <__bad_interrupt>
   e:	30 c0       	rjmp	.+96     	; 0x70 <__bad_interrupt>
  10:	2f c0       	rjmp	.+94     	; 0x70 <__bad_interrupt>
  12:	2e c0       	rjmp	.+92     	; 0x70 <__bad_interrupt>
  14:	2d c0       	rjmp	.+90     	; 0x70 <__bad_interrupt>
  16:	2c c1       	rjmp	.+600    	; 0x270 <__vector_11>
  18:	2b c0       	rjmp	.+86     	; 0x70 <__bad_interrupt>
  1a:	2a c0       	rjmp	.+84     	; 0x70 <__bad_interrupt>
  1c:	29 c0       	rjmp	.+82     	; 0x70 <__bad_interrupt>
  1e:	28 c0       	rjmp	.+80     	; 0x70 <__bad_interrupt>
  20:	27 c0       	rjmp	.+78     	; 0x70 <__bad_interrupt>
  22:	26 c0       	rjmp	.+76     	; 0x70 <__bad_interrupt>
  24:	25 c0       	rjmp	.+74     	; 0x70 <__bad_interrupt>
  26:	44 c1       	rjmp	.+648    	; 0x2b0 <__vector_11+0x40>
  28:	45 c1       	rjmp	.+650    	; 0x2b4 <__vector_11+0x44>
  2a:	46 c1       	rjmp	.+652    	; 0x2b8 <__vector_11+0x48>
  2c:	47 c1       	rjmp	.+654    	; 0x2bc <__vector_11+0x4c>
  2e:	48 c1       	rjmp	.+656    	; 0x2c0 <__vector_11+0x50>
  30:	49 c1       	rjmp	.+658    	; 0x2c4 <__vector_11+0x54>
  32:	4a c1       	rjmp	.+660    	; 0x2c8 <__vector_11+0x58>
  34:	4b c1       	rjmp	.+662    	; 0x2cc <__vector_11+0x5c>
  36:	57 c1       	rjmp	.+686    	; 0x2e6 <__vector_11+0x76>
  38:	63 c1       	rjmp	.+710    	; 0x300 <__vector_11+0x90>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_copy_data>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	e0 e4       	ldi	r30, 0x40	; 64
  4e:	f4 e0       	ldi	r31, 0x04	; 4
  50:	02 c0       	rjmp	.+4      	; 0x56 <__do_copy_data+0x10>
  52:	05 90       	lpm	r0, Z+
  54:	0d 92       	st	X+, r0
  56:	a8 36       	cpi	r26, 0x68	; 104
  58:	b1 07       	cpc	r27, r17
  5a:	d9 f7       	brne	.-10     	; 0x52 <__do_copy_data+0xc>

0000005c <__do_clear_bss>:
  5c:	20 e0       	ldi	r18, 0x00	; 0
  5e:	a8 e6       	ldi	r26, 0x68	; 104
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
  64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
  66:	af 37       	cpi	r26, 0x7F	; 127
  68:	b2 07       	cpc	r27, r18
  6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
  6c:	df d0       	rcall	.+446    	; 0x22c <main>
  6e:	e6 c1       	rjmp	.+972    	; 0x43c <_exit>

00000070 <__bad_interrupt>:
  70:	c7 cf       	rjmp	.-114    	; 0x0 <__vectors>

00000072 <cmd_slow>:

char status = AUTO;;

void cmd_slow()
{
	inc_TS();
  72:	4f d0       	rcall	.+158    	; 0x112 <inc_TS>
	if(get_TS() == TS_MAX)dec_TS();
  74:	44 d0       	rcall	.+136    	; 0xfe <get_TS>
  76:	80 31       	cpi	r24, 0x10	; 16
  78:	97 42       	sbci	r25, 0x27	; 39
  7a:	09 f4       	brne	.+2      	; 0x7e <cmd_slow+0xc>
  7c:	54 d0       	rcall	.+168    	; 0x126 <dec_TS>
	UDR = get_TS();
  7e:	3f d0       	rcall	.+126    	; 0xfe <get_TS>
  80:	8c b9       	out	0x0c, r24	; 12
  82:	08 95       	ret

00000084 <cmd_acc>:
}

void cmd_acc()
{
	dec_TS();
  84:	50 d0       	rcall	.+160    	; 0x126 <dec_TS>
	if(get_TS() == TS_MIN)inc_TS();
  86:	3b d0       	rcall	.+118    	; 0xfe <get_TS>
  88:	01 96       	adiw	r24, 0x01	; 1
  8a:	09 f4       	brne	.+2      	; 0x8e <cmd_acc+0xa>
  8c:	42 d0       	rcall	.+132    	; 0x112 <inc_TS>
	UDR = get_TS();
  8e:	37 d0       	rcall	.+110    	; 0xfe <get_TS>
  90:	8c b9       	out	0x0c, r24	; 12
  92:	08 95       	ret

00000094 <cmd_STOP>:
}

void cmd_STOP()
{
	status = STOP;
  94:	10 92 60 00 	sts	0x0060, r1
  98:	08 95       	ret

0000009a <cmd_AUTO>:
}

void cmd_AUTO()
{
	status = AUTO;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 60 00 	sts	0x0060, r24
  a0:	08 95       	ret

000000a2 <cmd_CHDIR>:
}

void cmd_CHDIR()
{
	change_DIR();
  a2:	58 d0       	rcall	.+176    	; 0x154 <change_DIR>
  a4:	08 95       	ret

000000a6 <cmd_MANI>:
}

void cmd_MANI()
{
	status = MANI;
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	80 93 60 00 	sts	0x0060, r24
  ac:	08 95       	ret

000000ae <cmd_STEP>:
}

void cmd_STEP()
{
	status = STEP;
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	80 93 60 00 	sts	0x0060, r24
	if (get_PWMS() == 0){
  b4:	29 d0       	rcall	.+82     	; 0x108 <get_PWMS>
  b6:	89 2b       	or	r24, r25
  b8:	09 f4       	brne	.+2      	; 0xbc <cmd_STEP+0xe>
			reset_PWMC();
  ba:	57 d0       	rcall	.+174    	; 0x16a <reset_PWMC>
  bc:	08 95       	ret

000000be <_set_STEP>:
}

void _set_STEP(unsigned char para)
{
	unsigned int val = para * FACTOR;
	set_PWMS(val);
  be:	28 ec       	ldi	r18, 0xC8	; 200
  c0:	82 9f       	mul	r24, r18
  c2:	c0 01       	movw	r24, r0
  c4:	11 24       	eor	r1, r1
  c6:	41 d0       	rcall	.+130    	; 0x14a <set_PWMS>
  c8:	08 95       	ret

000000ca <_set_DIR>:
}

void _set_DIR(unsigned char para)
{
	if(para > 1)UDR = 'E';
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	18 f0       	brcs	.+6      	; 0xd4 <_set_DIR+0xa>
  ce:	85 e4       	ldi	r24, 0x45	; 69
  d0:	8c b9       	out	0x0c, r24	; 12
  d2:	08 95       	ret
	else
	{
		set_DIR(para);
  d4:	37 d0       	rcall	.+110    	; 0x144 <set_DIR>
  d6:	08 95       	ret

000000d8 <_set_TSX>:
	}
}
void _set_TSX(unsigned char para)
{
	set_TS(CMD_MUL_TSX * para);
  d8:	28 2f       	mov	r18, r24
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	c9 01       	movw	r24, r18
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	82 0f       	add	r24, r18
  f0:	93 1f       	adc	r25, r19
  f2:	23 d0       	rcall	.+70     	; 0x13a <set_TS>
  f4:	08 95       	ret

000000f6 <motor_port_init>:
{
	ERR++;
}

void motor_port_init(){
	DDRB = 0xff;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  fa:	18 ba       	out	0x18, r1	; 24
  fc:	08 95       	ret

000000fe <get_TS>:
}

int get_TS(){return TS;}
  fe:	80 91 61 00 	lds	r24, 0x0061
 102:	90 91 62 00 	lds	r25, 0x0062
 106:	08 95       	ret

00000108 <get_PWMS>:
char get_DIR(){return DIR;}
unsigned int get_PWMS(){return PWMC;}
 108:	80 91 63 00 	lds	r24, 0x0063
 10c:	90 91 64 00 	lds	r25, 0x0064
 110:	08 95       	ret

00000112 <inc_TS>:
void inc_TS(){TS++;}
 112:	80 91 61 00 	lds	r24, 0x0061
 116:	90 91 62 00 	lds	r25, 0x0062
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	90 93 62 00 	sts	0x0062, r25
 120:	80 93 61 00 	sts	0x0061, r24
 124:	08 95       	ret

00000126 <dec_TS>:
void dec_TS(){TS--;}
 126:	80 91 61 00 	lds	r24, 0x0061
 12a:	90 91 62 00 	lds	r25, 0x0062
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	90 93 62 00 	sts	0x0062, r25
 134:	80 93 61 00 	sts	0x0061, r24
 138:	08 95       	ret

0000013a <set_TS>:
void set_TS(unsigned int val){TS = val;}
 13a:	90 93 62 00 	sts	0x0062, r25
 13e:	80 93 61 00 	sts	0x0061, r24
 142:	08 95       	ret

00000144 <set_DIR>:
void set_DIR(char dir){DIR = dir;}
 144:	80 93 69 00 	sts	0x0069, r24
 148:	08 95       	ret

0000014a <set_PWMS>:
void set_PWMS(unsigned int val){PWMS = val;}
 14a:	90 93 66 00 	sts	0x0066, r25
 14e:	80 93 65 00 	sts	0x0065, r24
 152:	08 95       	ret

00000154 <change_DIR>:

void change_DIR() //here assume you have defined FORWARD and BACK as 0 or 1
{
	if(DIR)DIR = 0;
 154:	80 91 69 00 	lds	r24, 0x0069
 158:	88 23       	and	r24, r24
 15a:	19 f0       	breq	.+6      	; 0x162 <change_DIR+0xe>
 15c:	10 92 69 00 	sts	0x0069, r1
 160:	08 95       	ret
		else DIR = 1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 69 00 	sts	0x0069, r24
 168:	08 95       	ret

0000016a <reset_PWMC>:
}

void reset_PWMC(){PWMC = PWMS;}
 16a:	80 91 65 00 	lds	r24, 0x0065
 16e:	90 91 66 00 	lds	r25, 0x0066
 172:	90 93 64 00 	sts	0x0064, r25
 176:	80 93 63 00 	sts	0x0063, r24
 17a:	08 95       	ret

0000017c <motor_forward>:
	}
}

void motor_forward()
{
	int TC = TS;
 17c:	80 91 61 00 	lds	r24, 0x0061
 180:	90 91 62 00 	lds	r25, 0x0062
	Set_Bit(PORTB, MPF);
 184:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	ef ec       	ldi	r30, 0xCF	; 207
 188:	f7 e0       	ldi	r31, 0x07	; 7
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <motor_forward+0xe>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <motor_forward+0x14>
 190:	00 00       	nop
	_delay_us(THC);
	Clr_Bit(PORTB, MPF);
 192:	c0 98       	cbi	0x18, 0	; 24
	while(TC--)
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	39 f0       	breq	.+14     	; 0x1a6 <motor_forward+0x2a>
 198:	fa e1       	ldi	r31, 0x1A	; 26
 19a:	fa 95       	dec	r31
 19c:	f1 f7       	brne	.-4      	; 0x19a <motor_forward+0x1e>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <motor_forward+0x24>
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	00 97       	sbiw	r24, 0x00	; 0
 1a4:	c9 f7       	brne	.-14     	; 0x198 <motor_forward+0x1c>
 1a6:	08 95       	ret

000001a8 <motor_back>:
	_delay_us(TLS);
}

void motor_back()
{
	int TC = TS;
 1a8:	80 91 61 00 	lds	r24, 0x0061
 1ac:	90 91 62 00 	lds	r25, 0x0062
	Set_Bit(PORTB, MPB);
 1b0:	c1 9a       	sbi	0x18, 1	; 24
 1b2:	ef ec       	ldi	r30, 0xCF	; 207
 1b4:	f7 e0       	ldi	r31, 0x07	; 7
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <motor_back+0xe>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <motor_back+0x14>
 1bc:	00 00       	nop
	_delay_us(THC);
	Clr_Bit(PORTB, MPB);
 1be:	c1 98       	cbi	0x18, 1	; 24
	while(TC--)
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	39 f0       	breq	.+14     	; 0x1d2 <motor_back+0x2a>
 1c4:	fa e1       	ldi	r31, 0x1A	; 26
 1c6:	fa 95       	dec	r31
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <motor_back+0x1e>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <motor_back+0x24>
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	c9 f7       	brne	.-14     	; 0x1c4 <motor_back+0x1c>
 1d2:	08 95       	ret

000001d4 <motor_action>:
	}
}

void motor_action()
{
	switch(DIR)
 1d4:	80 91 69 00 	lds	r24, 0x0069
 1d8:	88 23       	and	r24, r24
 1da:	19 f0       	breq	.+6      	; 0x1e2 <motor_action+0xe>
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	19 f0       	breq	.+6      	; 0x1e6 <motor_action+0x12>
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <motor_action+0x16>
	{
		case FORWARD :
		motor_forward();
 1e2:	cc df       	rcall	.-104    	; 0x17c <motor_forward>
		break;
 1e4:	08 95       	ret
		case BACK :
		motor_back();
 1e6:	e0 df       	rcall	.-64     	; 0x1a8 <motor_back>
		break;
 1e8:	08 95       	ret
static char DIR = FORWARD;
static char ERR = 0;

static void _error()
{
	ERR++;
 1ea:	80 91 68 00 	lds	r24, 0x0068
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
 1f0:	80 93 68 00 	sts	0x0068, r24
 1f4:	08 95       	ret

000001f6 <motor_step>:

void reset_PWMC(){PWMC = PWMS;}

void motor_step()
{
	if (PWMC)
 1f6:	80 91 63 00 	lds	r24, 0x0063
 1fa:	90 91 64 00 	lds	r25, 0x0064
 1fe:	89 2b       	or	r24, r25
 200:	51 f0       	breq	.+20     	; 0x216 <motor_step+0x20>
	{	
		motor_action();
 202:	e8 df       	rcall	.-48     	; 0x1d4 <motor_action>
		PWMC--;
 204:	80 91 63 00 	lds	r24, 0x0063
 208:	90 91 64 00 	lds	r25, 0x0064
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	90 93 64 00 	sts	0x0064, r25
 212:	80 93 63 00 	sts	0x0063, r24
 216:	08 95       	ret

00000218 <motor_stop>:
	_delay_us(TLS);
}

void motor_stop()
{
	Clr_Bit(PORTB, MPF);
 218:	c0 98       	cbi	0x18, 0	; 24
	Clr_Bit(PORTB, MPB);
 21a:	c1 98       	cbi	0x18, 1	; 24
 21c:	08 95       	ret

0000021e <pcint_init>:

extern char status;

void pcint_init(void)
{
	GIMSK |= (1 << INT0);
 21e:	8b b7       	in	r24, 0x3b	; 59
 220:	80 64       	ori	r24, 0x40	; 64
 222:	8b bf       	out	0x3b, r24	; 59
	GIMSK |= (1 << INT1);
 224:	8b b7       	in	r24, 0x3b	; 59
 226:	80 68       	ori	r24, 0x80	; 128
 228:	8b bf       	out	0x3b, r24	; 59
 22a:	08 95       	ret

0000022c <main>:


#define BAUD_9600 9600

static void uart_init_9600(void){
	UBRRH = (F_CPU / BAUD_9600 / 16 - 1) / 256;
 22c:	10 bc       	out	0x20, r1	; 32
	UBRRL = (F_CPU / BAUD_9600 / 16 - 1) % 256;
 22e:	83 e3       	ldi	r24, 0x33	; 51
 230:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << RXCIE) | (1 << RXEN) | (1 << TXEN);
 232:	8a b1       	in	r24, 0x0a	; 10
 234:	88 69       	ori	r24, 0x98	; 152
 236:	8a b9       	out	0x0a, r24	; 10
}

int main(void)
{
	uart_init_9600(); 	//usart 9600 buad
	pcint_init();		//set up interrupt
 238:	f2 df       	rcall	.-28     	; 0x21e <pcint_init>
	UDR = 35;			//acknowledge
 23a:	83 e2       	ldi	r24, 0x23	; 35
 23c:	8c b9       	out	0x0c, r24	; 12
	sei();				//enable interrupt
 23e:	78 94       	sei
	motor_port_init();		//io port initial
 240:	5a df       	rcall	.-332    	; 0xf6 <motor_port_init>
	while(1)
	{
		//motor_forward();
		switch(status){
 242:	80 91 60 00 	lds	r24, 0x0060
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	41 f0       	breq	.+16     	; 0x25a <main+0x2e>
 24a:	28 f0       	brcs	.+10     	; 0x256 <main+0x2a>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	39 f0       	breq	.+14     	; 0x25e <main+0x32>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	39 f0       	breq	.+14     	; 0x262 <main+0x36>
 254:	f8 cf       	rjmp	.-16     	; 0x246 <main+0x1a>
			case STOP :
				motor_stop();
 256:	e0 df       	rcall	.-64     	; 0x218 <motor_stop>
			break;
 258:	f4 cf       	rjmp	.-24     	; 0x242 <main+0x16>
			case AUTO :
				motor_action();
 25a:	bc df       	rcall	.-136    	; 0x1d4 <motor_action>
			break;
 25c:	f2 cf       	rjmp	.-28     	; 0x242 <main+0x16>
			case MANI :
				motor_action();
 25e:	ba df       	rcall	.-140    	; 0x1d4 <motor_action>
			break;
 260:	f0 cf       	rjmp	.-32     	; 0x242 <main+0x16>
			case STEP:
				motor_step();
 262:	c9 df       	rcall	.-110    	; 0x1f6 <motor_step>
				if (get_PWMS() == 0)
 264:	51 df       	rcall	.-350    	; 0x108 <get_PWMS>
 266:	89 2b       	or	r24, r25
 268:	61 f7       	brne	.-40     	; 0x242 <main+0x16>
				{
					status = STOP;
 26a:	10 92 60 00 	sts	0x0060, r1
 26e:	e9 cf       	rjmp	.-46     	; 0x242 <main+0x16>

00000270 <__vector_11>:
unsigned char urc = 0;
unsigned char cmd_stat= 0;
unsigned char para_buf[16];
unsigned char *pbuf;

ISR(SIG_UART_RECV){
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	2f 93       	push	r18
 27c:	3f 93       	push	r19
 27e:	4f 93       	push	r20
 280:	5f 93       	push	r21
 282:	6f 93       	push	r22
 284:	7f 93       	push	r23
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	af 93       	push	r26
 28c:	bf 93       	push	r27
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
	urc = UDR;
 292:	8c b1       	in	r24, 0x0c	; 12
 294:	80 93 6b 00 	sts	0x006B, r24
	if (!parac)
 298:	90 91 6c 00 	lds	r25, 0x006C
 29c:	91 11       	cpse	r25, r1
 29e:	40 c0       	rjmp	.+128    	; 0x320 <__vector_11+0xb0>
	{
		switch(urc){
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	8a 30       	cpi	r24, 0x0A	; 10
 2a4:	91 05       	cpc	r25, r1
 2a6:	c8 f5       	brcc	.+114    	; 0x31a <__vector_11+0xaa>
 2a8:	fc 01       	movw	r30, r24
 2aa:	ed 5e       	subi	r30, 0xED	; 237
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	09 94       	ijmp
			case CMD_SLOW : cmd_slow();
 2b0:	e0 de       	rcall	.-576    	; 0x72 <cmd_slow>
			break;
 2b2:	5f c0       	rjmp	.+190    	; 0x372 <__vector_11+0x102>
			case CMD_ACC : cmd_acc();
 2b4:	e7 de       	rcall	.-562    	; 0x84 <cmd_acc>
			break;
 2b6:	5d c0       	rjmp	.+186    	; 0x372 <__vector_11+0x102>
			case CMD_STOP : cmd_STOP();
 2b8:	ed de       	rcall	.-550    	; 0x94 <cmd_STOP>
			break;
 2ba:	5b c0       	rjmp	.+182    	; 0x372 <__vector_11+0x102>
			case CMD_AUTO : cmd_AUTO();
 2bc:	ee de       	rcall	.-548    	; 0x9a <cmd_AUTO>
			break;
 2be:	59 c0       	rjmp	.+178    	; 0x372 <__vector_11+0x102>
			case CMD_MANI : cmd_MANI();
 2c0:	f2 de       	rcall	.-540    	; 0xa6 <cmd_MANI>
			break;
 2c2:	57 c0       	rjmp	.+174    	; 0x372 <__vector_11+0x102>
			case CMD_STEP : cmd_STEP();
 2c4:	f4 de       	rcall	.-536    	; 0xae <cmd_STEP>
			break;
 2c6:	55 c0       	rjmp	.+170    	; 0x372 <__vector_11+0x102>
			case CMD_CHDIR : cmd_CHDIR();
 2c8:	ec de       	rcall	.-552    	; 0xa2 <cmd_CHDIR>
			break;
 2ca:	53 c0       	rjmp	.+166    	; 0x372 <__vector_11+0x102>
			case CMD_SET_DIR :
				parac = 1;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 6c 00 	sts	0x006C, r24
				pbuf = para_buf;
 2d2:	8d e6       	ldi	r24, 0x6D	; 109
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	90 93 7e 00 	sts	0x007E, r25
 2da:	80 93 7d 00 	sts	0x007D, r24
				cmd_stat = CMD_SET_DIR;
 2de:	87 e0       	ldi	r24, 0x07	; 7
 2e0:	80 93 6a 00 	sts	0x006A, r24
			break;
 2e4:	46 c0       	rjmp	.+140    	; 0x372 <__vector_11+0x102>
			case CMD_SET_TSX :
				parac = 1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 6c 00 	sts	0x006C, r24
				pbuf = para_buf;
 2ec:	8d e6       	ldi	r24, 0x6D	; 109
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	90 93 7e 00 	sts	0x007E, r25
 2f4:	80 93 7d 00 	sts	0x007D, r24
				cmd_stat = CMD_SET_TSX;
 2f8:	88 e0       	ldi	r24, 0x08	; 8
 2fa:	80 93 6a 00 	sts	0x006A, r24
			break;
 2fe:	39 c0       	rjmp	.+114    	; 0x372 <__vector_11+0x102>
			case CMD_SET_STEP : 
				parac = 1;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	80 93 6c 00 	sts	0x006C, r24
				pbuf = para_buf;
 306:	8d e6       	ldi	r24, 0x6D	; 109
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	90 93 7e 00 	sts	0x007E, r25
 30e:	80 93 7d 00 	sts	0x007D, r24
				cmd_stat = CMD_SET_STEP;
 312:	89 e0       	ldi	r24, 0x09	; 9
 314:	80 93 6a 00 	sts	0x006A, r24
			break;
 318:	2c c0       	rjmp	.+88     	; 0x372 <__vector_11+0x102>
			default:
			UDR = 'E';
 31a:	85 e4       	ldi	r24, 0x45	; 69
 31c:	8c b9       	out	0x0c, r24	; 12
 31e:	29 c0       	rjmp	.+82     	; 0x372 <__vector_11+0x102>
		}
	}
	else
	{
		*pbuf++ = urc;
 320:	e0 91 7d 00 	lds	r30, 0x007D
 324:	f0 91 7e 00 	lds	r31, 0x007E
 328:	cf 01       	movw	r24, r30
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	90 93 7e 00 	sts	0x007E, r25
 330:	80 93 7d 00 	sts	0x007D, r24
 334:	80 91 6b 00 	lds	r24, 0x006B
 338:	80 83       	st	Z, r24
		parac--;
 33a:	80 91 6c 00 	lds	r24, 0x006C
 33e:	81 50       	subi	r24, 0x01	; 1
 340:	80 93 6c 00 	sts	0x006C, r24
		if (!parac)
 344:	81 11       	cpse	r24, r1
 346:	15 c0       	rjmp	.+42     	; 0x372 <__vector_11+0x102>
		{
			switch(cmd_stat)
 348:	80 91 6a 00 	lds	r24, 0x006A
 34c:	88 30       	cpi	r24, 0x08	; 8
 34e:	69 f0       	breq	.+26     	; 0x36a <__vector_11+0xfa>
 350:	89 30       	cpi	r24, 0x09	; 9
 352:	19 f0       	breq	.+6      	; 0x35a <__vector_11+0xea>
 354:	87 30       	cpi	r24, 0x07	; 7
 356:	69 f4       	brne	.+26     	; 0x372 <__vector_11+0x102>
 358:	04 c0       	rjmp	.+8      	; 0x362 <__vector_11+0xf2>
			{
				case CMD_SET_STEP :
					_set_STEP(para_buf[0]); 
 35a:	80 91 6d 00 	lds	r24, 0x006D
 35e:	af de       	rcall	.-674    	; 0xbe <_set_STEP>
				break;
 360:	08 c0       	rjmp	.+16     	; 0x372 <__vector_11+0x102>
				case CMD_SET_DIR :
					_set_DIR(para_buf[0]);
 362:	80 91 6d 00 	lds	r24, 0x006D
 366:	b1 de       	rcall	.-670    	; 0xca <_set_DIR>
				break;
 368:	04 c0       	rjmp	.+8      	; 0x372 <__vector_11+0x102>
				case CMD_SET_TSX :
					_set_TSX(para_buf[0]);
 36a:	80 91 6d 00 	lds	r24, 0x006D
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	b3 de       	rcall	.-666    	; 0xd8 <_set_TSX>
				break;
			}
		}
	}
}
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	7f 91       	pop	r23
 380:	6f 91       	pop	r22
 382:	5f 91       	pop	r21
 384:	4f 91       	pop	r20
 386:	3f 91       	pop	r19
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <__vector_1>:

ISR(SIG_INTERRUPT0)
{
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	2f 93       	push	r18
 3a0:	3f 93       	push	r19
 3a2:	4f 93       	push	r20
 3a4:	5f 93       	push	r21
 3a6:	6f 93       	push	r22
 3a8:	7f 93       	push	r23
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
 3b2:	ef 93       	push	r30
 3b4:	ff 93       	push	r31
	set_DIR(FORWARD);
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	c5 de       	rcall	.-630    	; 0x144 <set_DIR>
	if (status != AUTO)
 3ba:	80 91 60 00 	lds	r24, 0x0060
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	11 f0       	breq	.+4      	; 0x3c6 <__vector_1+0x32>
			status = STOP;
 3c2:	10 92 60 00 	sts	0x0060, r1
}
 3c6:	ff 91       	pop	r31
 3c8:	ef 91       	pop	r30
 3ca:	bf 91       	pop	r27
 3cc:	af 91       	pop	r26
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	7f 91       	pop	r23
 3d4:	6f 91       	pop	r22
 3d6:	5f 91       	pop	r21
 3d8:	4f 91       	pop	r20
 3da:	3f 91       	pop	r19
 3dc:	2f 91       	pop	r18
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <__vector_2>:

ISR(SIG_INTERRUPT1)
{
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	2f 93       	push	r18
 3f4:	3f 93       	push	r19
 3f6:	4f 93       	push	r20
 3f8:	5f 93       	push	r21
 3fa:	6f 93       	push	r22
 3fc:	7f 93       	push	r23
 3fe:	8f 93       	push	r24
 400:	9f 93       	push	r25
 402:	af 93       	push	r26
 404:	bf 93       	push	r27
 406:	ef 93       	push	r30
 408:	ff 93       	push	r31
	set_DIR(BACK);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	9b de       	rcall	.-714    	; 0x144 <set_DIR>
	if (status != AUTO)
 40e:	80 91 60 00 	lds	r24, 0x0060
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	11 f0       	breq	.+4      	; 0x41a <__vector_2+0x32>
			status = STOP;
 416:	10 92 60 00 	sts	0x0060, r1
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <_exit>:
 43c:	f8 94       	cli

0000043e <__stop_program>:
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__stop_program>
