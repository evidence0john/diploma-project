#include "common_definitions.h"
#include <avr/io.h>
#include <avr/pgmspace.h>
#include "nokia_5110_lcd.h"

const char pic[] PROGMEM =

{
	0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0XE0, 0X10, 0X08, 0X08, 0X18, 0X00, 0X00, 0X00, 0X00,
	0XE0, 0X18, 0XE0, 0X00, 0X00, 0X08, 0XF8, 0X78, 0X80, 0X78, 0XF8, 0X08, 0X08, 0XF8, 0X88, 0X88,
	0XC8, 0X18, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0XE0, 0X10, 0X08, 0X08, 0X10, 0XE0,
	0X00, 0X08, 0X38, 0XC8, 0X00, 0XC8, 0X38, 0X08, 0X08, 0XF8, 0X88, 0X88, 0XC8, 0X18, 0X00, 0X08,
	0XF8, 0X48, 0XC8, 0X48, 0X30, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
	0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X03, 0X84, 0X88, 0X89, 0X87,
	0X01, 0X00, 0X88, 0X8E, 0X89, 0X81, 0X09, 0X0E, 0X88, 0X88, 0X8F, 0X00, 0X0F, 0X80, 0X8F, 0X88,
	0X88, 0X0F, 0X08, 0X88, 0X89, 0X8C, 0X80, 0X80, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X03, 0X04,
	0X08, 0X08, 0X04, 0X03, 0X00, 0X00, 0X00, 0X03, 0X0C, 0X03, 0X00, 0X00, 0X08, 0X0F, 0X08, 0X08,
	0X09, 0X0C, 0X00, 0X08, 0X0F, 0X08, 0X00, 0X03, 0X0C, 0X08, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
	0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X63,
	0X44, 0X44, 0X48, 0X31, 0X00, 0X3F, 0X40, 0X40, 0X40, 0X21, 0X00, 0X3F, 0X40, 0X40, 0X40, 0X3F,
	0X00, 0X40, 0X7F, 0X44, 0X0C, 0X73, 0X40, 0X40, 0X7F, 0X44, 0X4E, 0X61, 0X00, 0X00, 0X00, 0X42,
	0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
	0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
	0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
	0X00, 0X00, 0X00, 0X00, 0XF0, 0XC0, 0X80, 0X00, 0X80, 0XC0, 0XE0, 0XFE, 0XFF, 0XFB, 0XFB, 0XFF,
	0XAF, 0XAF, 0XAF, 0X0E, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
	0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0XC0,
	0XC0, 0X0C, 0XFC, 0X00, 0X80, 0X00, 0X00, 0XF0, 0XF0, 0X00, 0X03, 0XFF, 0X00, 0X00, 0XE0, 0X30,
	0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
	0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X03, 0X07, 0X0F, 0X0F, 0XFF, 0XDF, 0X8F, 0X0F,
	0XFF, 0XDF, 0X8F, 0X07, 0X01, 0X01, 0X03, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
	0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
	0X00, 0X00, 0X00, 0X0F, 0X0F, 0X8C, 0XFF, 0X8C, 0X0F, 0X00, 0X00, 0X03, 0X0F, 0X0E, 0X0C, 0XFF,
	0X0C, 0X0C, 0X0F, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
	0X00, 0X00, 0X00, 0X00, 0X03, 0X03, 0X03, 0X01, 0X01, 0X01, 0X05, 0X05, 0X05, 0X05, 0X05, 0X05,
	0X05, 0X05, 0X05, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X09, 0X09, 0X09, 0X09, 0X09, 0X01,
	0X01, 0X01, 0X01, 0X03, 0X03, 0X03, 0X03, 0X01, 0X01, 0X01, 0X01, 0X05, 0X05, 0X05, 0X05, 0X05,
	0X01, 0X01, 0X01, 0X01, 0X01, 0X09, 0X09, 0X09, 0X09, 0X09, 0X09, 0X09, 0X09, 0X01, 0X01, 0X01,
	0X01, 0X01, 0X01, 0X01, 0X05, 0X05, 0X05, 0X01, 0X01, 0X01, 0X01, 0X01, 0X03, 0X03, 0X03, 0X03,
	0X03, 0X01, 0X01, 0X01, 0X05, 0X05, 0X05, 0X05,
};





void refresh_screen()
{
	unsigned char x;
	unsigned char y;
	for(y = 0; y < 6; y++)
	{
		for(x = 0; x < 84; x++)
		{
			Writebyte(1,pgm_read_byte(pic + (y * 84 + x)));
		}
	}
}

const char eh[] PROGMEM =
{
0x10,0x10,0xD0,0xFF,0x90,0x10,0x00,0xFE,0x12,0x92,0x92,0xF2,0x92,0x92,0x12,0x00,
0x04,0x03,0x00,0xFF,0x00,0x03,0x00,0x7F,0x48,0x48,0x48,0x4F,0x48,0x48,0x48,0x00,
};

void refresh()
{
	SetX_Y(12, 3);
	for(int x = 0; x < 16; x++)
	{
		Writebyte(1,pgm_read_byte(eh + x));
	}
	SetX_Y(12, 4);
	for(int x = 16; x < 32; x++)
	{
		Writebyte(1,pgm_read_byte(eh + x));
	}
}
const char english[][6] PROGMEM =
{
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
	{ 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
	{ 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
	{ 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
	{ 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $ c
	{ 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
	{ 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
	{ 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
	{ 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
	{ 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
	{ 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
	{ 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
	{ 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
	{ 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
	{ 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
	{ 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
	{ 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
	{ 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
	{ 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
	{ 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
	{ 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
	{ 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
	{ 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
	{ 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
	{ 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
	{ 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
	{ 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
	{ 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
	{ 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
	{ 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
	{ 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
	{ 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
	{ 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
	{ 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
	{ 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
	{ 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
	{ 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
	{ 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
	{ 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
	{ 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
	{ 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
	{ 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
	{ 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
	{ 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
	{ 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
	{ 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
	{ 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
	{ 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
	{ 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
	{ 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
	{ 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
	{ 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
	{ 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
	{ 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
	{ 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
	{ 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
	{ 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
	{ 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
	{ 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
	{ 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
	{ 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
	{ 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
	{ 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
	{ 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
	{ 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
	{ 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
	{ 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
	{ 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
	{ 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
	{ 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
	{ 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
	{ 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
	{ 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
	{ 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
	{ 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
	{ 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
	{ 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
	{ 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
	{ 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
	{ 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
	{ 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
	{ 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
};


void IOinit()
{
	DDRX |= 0xFF;
	//DDRB|=_BV(DDB2);
}

void Writebyte(unsigned char d_cflag, unsigned char din)
{
	unsigned char tmp;
	int i;
	tmp = din;
	PORTD &= ~_BV(SCE);
	if(d_cflag == 0) PORTD &= ~_BV(D_C);
	else PORTD |= _BV(D_C);
	for(i = 8; i > 0; i--)
	{
		PORTD &= ~_BV(SCK);
		if(tmp & 0x80) PORTD |= _BV(SDIN);
		else PORTD &= ~_BV(SDIN);
		PORTD |= _BV(SCK);
		tmp = tmp << 1;
	}
	PORTD |= _BV(SCE);
}

void Lcdclear()
{
	unsigned int i;
	Writebyte(0, 0x0c);
	Writebyte(0, 0x80);
	for(i = 0; i < 504; i++)
	Writebyte(1, 0);
}

void Lcdinit()
{
	PORTD &= ~_BV(RST);
	//_delay_us(1);
	PORTD |= _BV(RST);
	Writebyte(0, 0x21);
	Writebyte(0, 0xc0);
	Writebyte(0, 0x07);
	Writebyte(0, 0x13);
	Writebyte(0, 0x20);
	Lcdclear();
	Writebyte(0, 0x0c);
}

void SetX_Y(unsigned char x, unsigned char y)
{
	Writebyte(0, 0x80 | x);
	Writebyte(0, 0x40 | y);
}

void Writeletter(unsigned char letter)
{
	unsigned char i;
	unsigned char letter_disp[6];
	if(letter)
	{
		letter = letter - 32;
		for(i = 0; i < 6; i++)
		{
			letter_disp[i] = pgm_read_byte(english[letter] + i);
		}
		for(i = 0; i < 6; i++)
		Writebyte(1, letter_disp[i]);
	}
}

void Writedata_hex(unsigned char outdata)
{
	unsigned char outtmp;
	outtmp = outdata;
	if((outtmp >> 4) <= 0x09)
	Writeletter((outtmp >> 4) + 48);
	else
	Writeletter((outtmp >> 4) + 55);
	if((outtmp & 0x0f) <= 0x09)
	Writeletter((outtmp & 0x0f) + 48);
	else
	Writeletter((outtmp & 0x0f) + 55);
}

void Writedata_dec(unsigned char outdata)
{
	unsigned char getmp, shitmp, baitmp;

	if(outdata >= 0x64)
	{
		baitmp = outdata / 100;
		Writeletter(baitmp + 48);
	}
	shitmp = (outdata / 10) % 10;
	getmp = outdata % 10;
	Writeletter(shitmp + 48);
	Writeletter(getmp + 48);
}

void Writestring(unsigned char x_add, unsigned char y_add, char *str)
{
	SetX_Y(x_add, y_add);
	if (!*str)
		str++;
	while (*str)
	{
		Writeletter(*str);
		str++;
	}
}